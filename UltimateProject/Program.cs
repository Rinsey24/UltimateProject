using UltimateProject.Data;
using UltimateProject.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace UltimateProject
{
    internal class Program
    {
        static void Main()
        {
            using var context = new GenericContext();

            // üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î
            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();
            var connection = context.Database.GetDbConnection();
            if (connection.DataSource != null)
                Console.WriteLine($"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {Path.GetFullPath(connection.DataSource)}");

            // üìù –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–•
            var mainEntities = new List<MainEntity>
            {
                new() { Name = "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è", Description = "IT —Å–æ–±—ã—Ç–∏—è", Location = "–ú–æ—Å–∫–≤–∞" },
                new() { Name = "–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –§–µ—Å—Ç–∏–≤–∞–ª—å", Description = "–ñ–∏–≤–∞—è –º—É–∑—ã–∫–∞", Location = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" },
                new() { Name = "–ù–∞—É—á–Ω—ã–π –°–∏–º–ø–æ–∑–∏—É–º", Description = "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", Location = "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫" }
            };

            var relatedEntities = new List<RelatedEntity>
            {
                new() { Name = "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", Email = "anna@test.com" },
                new() { Name = "–ë–æ—Ä–∏—Å –ü–µ—Ç—Ä–æ–≤", Email = "boris@test.com" },
                new() { Name = "–°–≤–µ—Ç–ª–∞–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", Email = "svetlana@test.com" },
                new() { Name = "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤", Email = "dmitry@test.com" }
            };

            context.MainEntities.AddRange(mainEntities);
            context.RelatedEntities.AddRange(relatedEntities);
            context.SaveChanges();

            // üîó –°–û–ó–î–ê–ù–ò–ï –°–í–Ø–ó–ï–ô
            mainEntities[0].RelatedEntities.Add(relatedEntities[0]); // –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è + –ê–Ω–Ω–∞
            mainEntities[0].RelatedEntities.Add(relatedEntities[1]); // –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è + –ë–æ—Ä–∏—Å
            mainEntities[0].RelatedEntities.Add(relatedEntities[2]); // –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è + –°–≤–µ—Ç–ª–∞–Ω–∞

            mainEntities[1].RelatedEntities.Add(relatedEntities[1]); // –§–µ—Å—Ç–∏–≤–∞–ª—å + –ë–æ—Ä–∏—Å
            mainEntities[1].RelatedEntities.Add(relatedEntities[3]); // –§–µ—Å—Ç–∏–≤–∞–ª—å + –î–º–∏—Ç—Ä–∏–π

            mainEntities[2].RelatedEntities.Add(relatedEntities[0]); // –°–∏–º–ø–æ–∑–∏—É–º + –ê–Ω–Ω–∞
            mainEntities[2].RelatedEntities.Add(relatedEntities[2]); // –°–∏–º–ø–æ–∑–∏—É–º + –°–≤–µ—Ç–ª–∞–Ω–∞
            mainEntities[2].RelatedEntities.Add(relatedEntities[3]); // –°–∏–º–ø–æ–∑–∏—É–º + –î–º–∏—Ç—Ä–∏–π

            context.SaveChanges();

            // üî• LINQ –ó–ê–ü–†–û–°–´ –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –°–ò–ù–¢–ê–ö–°–ò–°–ï

            Console.WriteLine("1. –í–°–ï –û–°–ù–û–í–ù–´–ï –°–£–©–ù–û–°–¢–ò:");
            var allMain = (from entity in context.MainEntities
                           select entity).ToList();
            foreach (var m in allMain)
                Console.WriteLine($"   {m.Name} - {m.Location}");

            Console.WriteLine("\n2. –í–°–ï –°–í–Ø–ó–ê–ù–ù–´–ï –°–£–©–ù–û–°–¢–ò:");
            var allRelated = (from entity in context.RelatedEntities
                              select entity).ToList();
            foreach (var r in allRelated)
                Console.WriteLine($"   {r.Name} - {r.Email}");

            Console.WriteLine("\n3. –°–£–©–ù–û–°–¢–ò –° –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –°–í–Ø–ó–ï–ô:");
            var entitiesWithCount = (from entity in context.MainEntities
                                     select new
                                     {
                                         entity.Name,
                                         Count = entity.RelatedEntities.Count
                                     } into result
                                     orderby result.Count descending
                                     select result).ToList();

            foreach (var x in entitiesWithCount)
                Console.WriteLine($"   {x.Name}: {x.Count} —Å–≤—è–∑–µ–π");

            Console.WriteLine("\n4. –ü–û–ü–£–õ–Ø–†–ù–´–ï –°–£–©–ù–û–°–¢–ò (2+ —Å–≤—è–∑–µ–π):");
            var popularEntities = (from entity in context.MainEntities
                                   where entity.RelatedEntities.Count >= 2
                                   orderby entity.RelatedEntities.Count descending
                                   select entity).ToList();

            foreach (var m in popularEntities)
                Console.WriteLine($"   {m.Name}: {m.RelatedEntities.Count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");

            Console.WriteLine("\n5. –ê–ö–¢–ò–í–ù–´–ï –£–ß–ê–°–¢–ù–ò–ö–ò (2+ —Å–æ–±—ã—Ç–∏–π):");
            var activeParticipants = (from participant in context.RelatedEntities
                                      where participant.MainEntities.Count >= 2
                                      orderby participant.MainEntities.Count descending
                                      select participant).ToList();

            foreach (var r in activeParticipants)
                Console.WriteLine($"   {r.Name}: {r.MainEntities.Count} —Å–æ–±—ã—Ç–∏–π");

            Console.WriteLine("\n6. –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Æ:");
            var byLocation = (from entity in context.MainEntities
                              group entity by entity.Location into g
                              select new { Location = g.Key, Count = g.Count() }).ToList();

            foreach (var x in byLocation)
                Console.WriteLine($"   {x.Location}: {x.Count} —Å–æ–±—ã—Ç–∏–π");

            Console.WriteLine("\n7. –ü–ï–†–í–´–ï 2 –°–£–©–ù–û–°–¢–ò –° –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò:");
            var firstTwoWithParticipants = (from entity in context.MainEntities
                                            select entity).Take(2).ToList();

            foreach (var entity in firstTwoWithParticipants)
            {
                Console.WriteLine($"   {entity.Name}:");
                foreach (var participant in entity.RelatedEntities)
                {
                    Console.WriteLine($"     - {participant.Name}");
                }
            }

            Console.WriteLine("\n8. –ü–û–ò–°–ö –ü–û –ò–ú–ï–ù–ò:");
            var searchResult = (from entity in context.MainEntities
                                where entity.Name.Contains("–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è")
                                select entity).ToList();

            foreach (var m in searchResult)
                Console.WriteLine($"   –ù–∞–π–¥–µ–Ω–æ: {m.Name}");

            Console.WriteLine("\n9. –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –ò–ú–ï–ù–ò:");
            var sorted = (from entity in context.MainEntities
                          orderby entity.Name
                          select entity).ToList();

            foreach (var m in sorted)
                Console.WriteLine($"   {m.Name}");

            Console.WriteLine("\n10. –°–£–©–ù–û–°–¢–ò –ë–ï–ó –°–í–Ø–ó–ï–ô:");
            var entitiesWithoutRelations = (from entity in context.MainEntities
                                            where !entity.RelatedEntities.Any()
                                            select entity).ToList();

            if (entitiesWithoutRelations.Any())
                foreach (var m in entitiesWithoutRelations)
                    Console.WriteLine($"   {m.Name}");
            else
                Console.WriteLine("   –í—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–º–µ—é—Ç —Å–≤—è–∑–∏");

            // üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´ –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –°–ò–ù–¢–ê–ö–°–ò–°–ï

            Console.WriteLine("\n11. –°–õ–û–ñ–ù–ê–Ø –ì–†–£–ü–ü–ò–†–û–í–ö–ê –° –ê–ì–†–ï–ì–ê–¶–ò–ï–ô:");
            var complexGroup = (from entity in context.MainEntities
                                group entity by entity.Location into g
                                select new
                                {
                                    Location = g.Key,
                                    TotalEvents = g.Count(),
                                    AvgParticipants = g.Average(e => e.RelatedEntities.Count),
                                    EventNames = string.Join(", ", g.Select(e => e.Name))
                                }).ToList();

            foreach (var group in complexGroup)
            {
                Console.WriteLine($"   {group.Location}:");
                Console.WriteLine($"     –°–æ–±—ã—Ç–∏–π: {group.TotalEvents}");
                Console.WriteLine($"     –°—Ä–µ–¥–Ω–µ–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group.AvgParticipants:F1}");
                Console.WriteLine($"     –°–æ–±—ã—Ç–∏—è: {group.EventNames}");
            }

            Console.WriteLine("\n12. –°–û–ï–î–ò–ù–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô:");
            var joinedQuery = (from main in context.MainEntities
                               from related in main.RelatedEntities
                               select new
                               {
                                   Event = main.Name,
                                   Participant = related.Name,
                                   Location = main.Location
                               }).ToList();

            foreach (var item in joinedQuery.Take(5)) // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5
            {
                Console.WriteLine($"   {item.Event} -> {item.Participant} ({item.Location})");
            }

            Console.WriteLine("\n13. –£–ù–ò–ö–ê–õ–¨–ù–´–ï –õ–û–ö–ê–¶–ò–ò:");
            var uniqueLocations = (from entity in context.MainEntities
                                   select entity.Location).Distinct().ToList();

            foreach (var location in uniqueLocations)
            {
                Console.WriteLine($"   {location}");
            }
        }
    }
}